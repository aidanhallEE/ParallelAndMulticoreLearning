#include <iostream> //output
#include <fstream> // write to file
#include <chrono> //time
#include <atomic> //threads
#include <thread> //Need this for threads i think?
#include <math.h> // Sqrt
#include <tuple> // For multi output
#include <iomanip>
using namespace std;

// Declare Variables
int rangeInput;
int threadInput;

int finalTotal;
int finalSum;
float finalTime;

int lala[4]; // Placeholder for array
ofstream File("Output.txt");

// Declare Functions

void ResultsToFile(float time, int total, int sum, int array[]);

auto PrimeFinder(int Start, int End) {
	int sen = 0;
	int threadSum = 0;
	int threadTotal = 0;

	for (int i = 2; i < End + 1; i++) {
		for (int j = 2; j < i; j++) {
			if (i % j == 0) {
				sen = 1;
				break;
			}
		}
		if (sen == 0) {
			threadTotal++;
			threadSum = threadSum + i;
		}
		else {
			sen = 0;
		}
	}
	// Output
	struct result { int a; int b; };
	return result{ threadTotal, threadSum };
}

int main() {
	// Input
	cout << "Enter Range: ";
	cin >> rangeInput;

	cout << "Enter # of Threads: ";
	cin >> threadInput;

	// DO IT
	// Start Clock
	std::chrono::steady_clock::time_point begin = std::chrono::steady_clock::now();

	// Do function
	auto guy = PrimeFinder(0, rangeInput);

	// End clock
	std::chrono::steady_clock::time_point end = std::chrono::steady_clock::now();

	//Finalize Data
	finalTime = (std::chrono::duration_cast<std::chrono::milliseconds>(end - begin).count()/(float)1000);
	finalTotal = guy.a;
	finalSum = guy.b;

	// Print results
	ResultsToFile(finalTime, finalTotal, finalSum, lala);

	// Makes VS happy
	return 1;
}

void ResultsToFile(float time, int total, int sum, int array[]) {
	//<execution time> <total number of primes found> <sum of all primes found> <top ten maximum primes, listed in order from lowest to highest>
	File << fixed << setprecision(4) << time << "s | Total #: " << total << " | Sum: " << sum << " | " << array;
	File.close();
}

/*
void ThreadSorter(int n, int threads) {
	PrimeFinder(0 , n/2);
	int firstValue = 0;
	int secondValue = n / 2;
		;
	for (int t = 0; t < threads; t++) {
		if (t - 1 == threads) {
			PrimeFinder(secondValue, n);
		}
		else {
			PrimeFinder(n / 2, (n / 2) / 2);

			firstValue = secondValue;
			secondValue = secondValue / 2;
		}
	}
	PrimeFinder(n / 2, (n / 2) / 2);

	PrimeFinder(n / 2 / 2, n);
}*/